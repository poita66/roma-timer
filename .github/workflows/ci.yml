name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - 1.75.0  # minimum supported version

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        load: true
        tags: roma-timer:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        # Start container
        docker run -d --name roma-timer-test -p 3001:3000 \
          -e ROMA_TIMER_PORT=3001 \
          -e ROMA_TIMER_DATA_DIR=/tmp/test-data \
          roma-timer:test

        # Wait for container to be ready
        sleep 10

        # Check health endpoint
        curl -f http://localhost:3001/api/health || exit 1

        # Check that database file is created
        docker exec roma-timer-test test -f /tmp/test-data/roma_timer.json || exit 1

        # Cleanup
        docker stop roma-timer-test
        docker rm roma-timer-test

  frontend-test:
    name: Frontend Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate HTML
      run: |
        # Basic HTML validation
        find frontend -name "*.html" -exec echo "Validating {}" \; -exec html5validator --root {} \; || true

    - name: Validate JavaScript
      run: |
        # Check for syntax errors in JavaScript files
        find frontend -name "*.js" -exec echo "Checking {}" \; -exec node -c {} \;

    - name: Check file sizes
      run: |
        # Ensure assets aren't too large
        echo "Frontend file sizes:"
        find frontend -type f -exec ls -lh {} \; | awk '{print $5, $9}'

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, docker-test]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Start services with Docker Compose
      run: |
        # Use a different port to avoid conflicts
        sed -i 's/3000:3000/3002:3000/' docker-compose.yml
        sed -i 's/ROMA_TIMER_PORT=3000/ROMA_TIMER_PORT=3002/' docker-compose.yml
        docker compose up -d

        # Wait for services to be ready
        sleep 30

    - name: Run integration tests
      run: |
        # Test API endpoints
        curl -f http://localhost:3002/api/health || exit 1

        # Test WebSocket connection
        timeout 10s wscat -c ws://localhost:3002/ws || exit 1

        # Test that data persists
        docker compose exec roma-timer test -f /app/data/roma_timer.json || exit 1

    - name: Collect logs
      if: failure()
      run: |
        docker compose logs

    - name: Cleanup
      if: always()
      run: |
        docker compose down --volumes

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run cargo audit
      uses: actions-rs/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Run Docker security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: roma-timer:test
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      if: always()

  check-dependencies:
    name: Check Dependencies
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check for outdated dependencies
      run: |
        cargo install cargo-outdated
        cargo outdated --exit-code 1 || echo "Dependencies are up to date"

    - name: Check for unused dependencies
      run: |
        cargo install cargo-udeps
        cargo +nightly udeps --all-targets || echo "No unused dependencies found"